// Code generated by protoc-gen-go. DO NOT EDIT.
// source: calculadora.proto

package calculadora

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Mensagem de Request
type Request struct {
	Op                   string   `protobuf:"bytes,1,opt,name=Op,proto3" json:"Op,omitempty"`
	P1                   int32    `protobuf:"varint,2,opt,name=P1,proto3" json:"P1,omitempty"`
	P2                   int32    `protobuf:"varint,3,opt,name=P2,proto3" json:"P2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e936b298201aba0, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetOp() string {
	if m != nil {
		return m.Op
	}
	return ""
}

func (m *Request) GetP1() int32 {
	if m != nil {
		return m.P1
	}
	return 0
}

func (m *Request) GetP2() int32 {
	if m != nil {
		return m.P2
	}
	return 0
}

// Mensagem de resposta
type Reply struct {
	N                    int32    `protobuf:"varint,1,opt,name=N,proto3" json:"N,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Reply) Reset()         { *m = Reply{} }
func (m *Reply) String() string { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()    {}
func (*Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e936b298201aba0, []int{1}
}

func (m *Reply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Reply.Unmarshal(m, b)
}
func (m *Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Reply.Marshal(b, m, deterministic)
}
func (m *Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reply.Merge(m, src)
}
func (m *Reply) XXX_Size() int {
	return xxx_messageInfo_Reply.Size(m)
}
func (m *Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_Reply proto.InternalMessageInfo

func (m *Reply) GetN() int32 {
	if m != nil {
		return m.N
	}
	return 0
}

func init() {
	proto.RegisterType((*Request)(nil), "calculadora.Request")
	proto.RegisterType((*Reply)(nil), "calculadora.Reply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CalculadoraClient is the client API for Calculadora service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalculadoraClient interface {
	Add(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
	Sub(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
	Div(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
	Mul(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
}

type calculadoraClient struct {
	cc *grpc.ClientConn
}

func NewCalculadoraClient(cc *grpc.ClientConn) CalculadoraClient {
	return &calculadoraClient{cc}
}

func (c *calculadoraClient) Add(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/calculadora.Calculadora/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculadoraClient) Sub(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/calculadora.Calculadora/Sub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculadoraClient) Div(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/calculadora.Calculadora/Div", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculadoraClient) Mul(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/calculadora.Calculadora/Mul", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalculadoraServer is the server API for Calculadora service.
type CalculadoraServer interface {
	Add(context.Context, *Request) (*Reply, error)
	Sub(context.Context, *Request) (*Reply, error)
	Div(context.Context, *Request) (*Reply, error)
	Mul(context.Context, *Request) (*Reply, error)
}

func RegisterCalculadoraServer(s *grpc.Server, srv CalculadoraServer) {
	s.RegisterService(&_Calculadora_serviceDesc, srv)
}

func _Calculadora_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculadoraServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculadora.Calculadora/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculadoraServer).Add(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculadora_Sub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculadoraServer).Sub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculadora.Calculadora/Sub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculadoraServer).Sub(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculadora_Div_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculadoraServer).Div(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculadora.Calculadora/Div",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculadoraServer).Div(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculadora_Mul_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculadoraServer).Mul(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculadora.Calculadora/Mul",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculadoraServer).Mul(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Calculadora_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calculadora.Calculadora",
	HandlerType: (*CalculadoraServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Calculadora_Add_Handler,
		},
		{
			MethodName: "Sub",
			Handler:    _Calculadora_Sub_Handler,
		},
		{
			MethodName: "Div",
			Handler:    _Calculadora_Div_Handler,
		},
		{
			MethodName: "Mul",
			Handler:    _Calculadora_Mul_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calculadora.proto",
}

func init() { proto.RegisterFile("calculadora.proto", fileDescriptor_3e936b298201aba0) }

var fileDescriptor_3e936b298201aba0 = []byte{
	// 171 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4c, 0x4e, 0xcc, 0x49,
	0x2e, 0xcd, 0x49, 0x4c, 0xc9, 0x2f, 0x4a, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x46,
	0x12, 0x52, 0xb2, 0xe4, 0x62, 0x0f, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0xe2, 0xe3, 0x62,
	0xf2, 0x2f, 0x90, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x62, 0xf2, 0x2f, 0x00, 0xf1, 0x03, 0x0c,
	0x25, 0x98, 0x14, 0x18, 0x35, 0x58, 0x83, 0x98, 0x02, 0x0c, 0xc1, 0x7c, 0x23, 0x09, 0x66, 0x28,
	0xdf, 0x48, 0x49, 0x94, 0x8b, 0x35, 0x28, 0xb5, 0x20, 0xa7, 0x52, 0x88, 0x87, 0x8b, 0xd1, 0x0f,
	0xac, 0x8f, 0x35, 0x88, 0xd1, 0xcf, 0xe8, 0x26, 0x23, 0x17, 0xb7, 0x33, 0xc2, 0x06, 0x21, 0x43,
	0x2e, 0x66, 0xc7, 0x94, 0x14, 0x21, 0x11, 0x3d, 0x64, 0x97, 0x40, 0xed, 0x94, 0x12, 0x42, 0x13,
	0x2d, 0xc8, 0xa9, 0x54, 0x62, 0x00, 0x69, 0x09, 0x2e, 0x4d, 0x22, 0x55, 0x8b, 0x4b, 0x66, 0x19,
	0xa9, 0x5a, 0x7c, 0x4b, 0x73, 0x48, 0xd1, 0x92, 0xc4, 0x06, 0x0e, 0x41, 0x63, 0x40, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xc9, 0x0a, 0x4d, 0x99, 0x56, 0x01, 0x00, 0x00,
}
