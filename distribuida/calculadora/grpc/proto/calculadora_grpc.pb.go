// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.1
// source: proto/calculadora.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CalculadoraClient is the client API for Calculadora service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalculadoraClient interface {
	Add(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
	Sub(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
	Div(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
	Mul(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
}

type calculadoraClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculadoraClient(cc grpc.ClientConnInterface) CalculadoraClient {
	return &calculadoraClient{cc}
}

func (c *calculadoraClient) Add(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/calculadora.Calculadora/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculadoraClient) Sub(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/calculadora.Calculadora/Sub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculadoraClient) Div(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/calculadora.Calculadora/Div", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculadoraClient) Mul(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/calculadora.Calculadora/Mul", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalculadoraServer is the server API for Calculadora service.
// All implementations should embed UnimplementedCalculadoraServer
// for forward compatibility
type CalculadoraServer interface {
	Add(context.Context, *Request) (*Reply, error)
	Sub(context.Context, *Request) (*Reply, error)
	Div(context.Context, *Request) (*Reply, error)
	Mul(context.Context, *Request) (*Reply, error)
}

// UnimplementedCalculadoraServer should be embedded to have forward compatible implementations.
type UnimplementedCalculadoraServer struct {
}

func (UnimplementedCalculadoraServer) Add(context.Context, *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedCalculadoraServer) Sub(context.Context, *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sub not implemented")
}
func (UnimplementedCalculadoraServer) Div(context.Context, *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Div not implemented")
}
func (UnimplementedCalculadoraServer) Mul(context.Context, *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mul not implemented")
}

// UnsafeCalculadoraServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalculadoraServer will
// result in compilation errors.
type UnsafeCalculadoraServer interface {
	mustEmbedUnimplementedCalculadoraServer()
}

func RegisterCalculadoraServer(s grpc.ServiceRegistrar, srv CalculadoraServer) {
	s.RegisterService(&Calculadora_ServiceDesc, srv)
}

func _Calculadora_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculadoraServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculadora.Calculadora/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculadoraServer).Add(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculadora_Sub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculadoraServer).Sub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculadora.Calculadora/Sub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculadoraServer).Sub(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculadora_Div_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculadoraServer).Div(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculadora.Calculadora/Div",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculadoraServer).Div(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculadora_Mul_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculadoraServer).Mul(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculadora.Calculadora/Mul",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculadoraServer).Mul(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Calculadora_ServiceDesc is the grpc.ServiceDesc for Calculadora service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Calculadora_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculadora.Calculadora",
	HandlerType: (*CalculadoraServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Calculadora_Add_Handler,
		},
		{
			MethodName: "Sub",
			Handler:    _Calculadora_Sub_Handler,
		},
		{
			MethodName: "Div",
			Handler:    _Calculadora_Div_Handler,
		},
		{
			MethodName: "Mul",
			Handler:    _Calculadora_Mul_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/calculadora.proto",
}
